// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListClusterVolumesParams creates a new ListClusterVolumesParams object
// with the default values initialized.
func NewListClusterVolumesParams() *ListClusterVolumesParams {
	var (
		stateDefault = []string{"starting", "running", "updating", "terminating", "terminated"}
	)
	return &ListClusterVolumesParams{
		State: stateDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListClusterVolumesParamsWithTimeout creates a new ListClusterVolumesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListClusterVolumesParamsWithTimeout(timeout time.Duration) *ListClusterVolumesParams {
	var (
		stateDefault = []string{"starting", "running", "updating", "terminating", "terminated"}
	)
	return &ListClusterVolumesParams{
		State: stateDefault,

		timeout: timeout,
	}
}

// NewListClusterVolumesParamsWithContext creates a new ListClusterVolumesParams object
// with the default values initialized, and the ability to set a context for a request
func NewListClusterVolumesParamsWithContext(ctx context.Context) *ListClusterVolumesParams {
	var (
		stateDefault = []string{"starting", "running", "updating", "terminating", "terminated"}
	)
	return &ListClusterVolumesParams{
		State: stateDefault,

		Context: ctx,
	}
}

// NewListClusterVolumesParamsWithHTTPClient creates a new ListClusterVolumesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListClusterVolumesParamsWithHTTPClient(client *http.Client) *ListClusterVolumesParams {
	var (
		stateDefault = []string{"starting", "running", "updating", "terminating", "terminated"}
	)
	return &ListClusterVolumesParams{
		State:      stateDefault,
		HTTPClient: client,
	}
}

/*ListClusterVolumesParams contains all the parameters to send to the API endpoint
for the list cluster volumes operation typically these are written to a http.Request
*/
type ListClusterVolumesParams struct {

	/*Cluster
	  The identifier of a cluster.

	*/
	Cluster string
	/*Org
	  The organization identifier

	*/
	Org string
	/*Project
	  The project identifier

	*/
	Project string
	/*State
	  Filter the volumes by specified states

	*/
	State []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list cluster volumes params
func (o *ListClusterVolumesParams) WithTimeout(timeout time.Duration) *ListClusterVolumesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list cluster volumes params
func (o *ListClusterVolumesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list cluster volumes params
func (o *ListClusterVolumesParams) WithContext(ctx context.Context) *ListClusterVolumesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list cluster volumes params
func (o *ListClusterVolumesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list cluster volumes params
func (o *ListClusterVolumesParams) WithHTTPClient(client *http.Client) *ListClusterVolumesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list cluster volumes params
func (o *ListClusterVolumesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCluster adds the cluster to the list cluster volumes params
func (o *ListClusterVolumesParams) WithCluster(cluster string) *ListClusterVolumesParams {
	o.SetCluster(cluster)
	return o
}

// SetCluster adds the cluster to the list cluster volumes params
func (o *ListClusterVolumesParams) SetCluster(cluster string) {
	o.Cluster = cluster
}

// WithOrg adds the org to the list cluster volumes params
func (o *ListClusterVolumesParams) WithOrg(org string) *ListClusterVolumesParams {
	o.SetOrg(org)
	return o
}

// SetOrg adds the org to the list cluster volumes params
func (o *ListClusterVolumesParams) SetOrg(org string) {
	o.Org = org
}

// WithProject adds the project to the list cluster volumes params
func (o *ListClusterVolumesParams) WithProject(project string) *ListClusterVolumesParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the list cluster volumes params
func (o *ListClusterVolumesParams) SetProject(project string) {
	o.Project = project
}

// WithState adds the state to the list cluster volumes params
func (o *ListClusterVolumesParams) WithState(state []string) *ListClusterVolumesParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the list cluster volumes params
func (o *ListClusterVolumesParams) SetState(state []string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *ListClusterVolumesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cluster
	if err := r.SetPathParam("cluster", o.Cluster); err != nil {
		return err
	}

	// path param org
	if err := r.SetPathParam("org", o.Org); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	valuesState := o.State

	joinedState := swag.JoinByFormat(valuesState, "")
	// query array param state
	if err := r.SetQueryParam("state", joinedState...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
