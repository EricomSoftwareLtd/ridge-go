// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// StatusReader is a Reader for the Status structure.
type StatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewStatusNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStatusNoContent creates a StatusNoContent with default headers values
func NewStatusNoContent() *StatusNoContent {
	return &StatusNoContent{}
}

/*StatusNoContent handles this case with default header values.

OK
*/
type StatusNoContent struct {
}

func (o *StatusNoContent) Error() string {
	return fmt.Sprintf("[GET /status][%d] statusNoContent ", 204)
}

func (o *StatusNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStatusForbidden creates a StatusForbidden with default headers values
func NewStatusForbidden() *StatusForbidden {
	return &StatusForbidden{}
}

/*StatusForbidden handles this case with default header values.

Forbidden
*/
type StatusForbidden struct {
	Payload string
}

func (o *StatusForbidden) Error() string {
	return fmt.Sprintf("[GET /status][%d] statusForbidden  %+v", 403, o.Payload)
}

func (o *StatusForbidden) GetPayload() string {
	return o.Payload
}

func (o *StatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
