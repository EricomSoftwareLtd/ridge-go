// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DescribeClusterCaCertificateReader is a Reader for the DescribeClusterCaCertificate structure.
type DescribeClusterCaCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DescribeClusterCaCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDescribeClusterCaCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDescribeClusterCaCertificateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDescribeClusterCaCertificateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDescribeClusterCaCertificateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDescribeClusterCaCertificateOK creates a DescribeClusterCaCertificateOK with default headers values
func NewDescribeClusterCaCertificateOK() *DescribeClusterCaCertificateOK {
	return &DescribeClusterCaCertificateOK{}
}

/*DescribeClusterCaCertificateOK handles this case with default header values.

Success
*/
type DescribeClusterCaCertificateOK struct {
	Payload strfmt.Base64
}

func (o *DescribeClusterCaCertificateOK) Error() string {
	return fmt.Sprintf("[GET /orgs/{org}/projects/{project}/clusters/{cluster}/ca-certificate][%d] describeClusterCaCertificateOK  %+v", 200, o.Payload)
}

func (o *DescribeClusterCaCertificateOK) GetPayload() strfmt.Base64 {
	return o.Payload
}

func (o *DescribeClusterCaCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDescribeClusterCaCertificateBadRequest creates a DescribeClusterCaCertificateBadRequest with default headers values
func NewDescribeClusterCaCertificateBadRequest() *DescribeClusterCaCertificateBadRequest {
	return &DescribeClusterCaCertificateBadRequest{}
}

/*DescribeClusterCaCertificateBadRequest handles this case with default header values.

Invalid request parameters
*/
type DescribeClusterCaCertificateBadRequest struct {
	Payload string
}

func (o *DescribeClusterCaCertificateBadRequest) Error() string {
	return fmt.Sprintf("[GET /orgs/{org}/projects/{project}/clusters/{cluster}/ca-certificate][%d] describeClusterCaCertificateBadRequest  %+v", 400, o.Payload)
}

func (o *DescribeClusterCaCertificateBadRequest) GetPayload() string {
	return o.Payload
}

func (o *DescribeClusterCaCertificateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDescribeClusterCaCertificateForbidden creates a DescribeClusterCaCertificateForbidden with default headers values
func NewDescribeClusterCaCertificateForbidden() *DescribeClusterCaCertificateForbidden {
	return &DescribeClusterCaCertificateForbidden{}
}

/*DescribeClusterCaCertificateForbidden handles this case with default header values.

Forbidden
*/
type DescribeClusterCaCertificateForbidden struct {
	Payload string
}

func (o *DescribeClusterCaCertificateForbidden) Error() string {
	return fmt.Sprintf("[GET /orgs/{org}/projects/{project}/clusters/{cluster}/ca-certificate][%d] describeClusterCaCertificateForbidden  %+v", 403, o.Payload)
}

func (o *DescribeClusterCaCertificateForbidden) GetPayload() string {
	return o.Payload
}

func (o *DescribeClusterCaCertificateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDescribeClusterCaCertificateNotFound creates a DescribeClusterCaCertificateNotFound with default headers values
func NewDescribeClusterCaCertificateNotFound() *DescribeClusterCaCertificateNotFound {
	return &DescribeClusterCaCertificateNotFound{}
}

/*DescribeClusterCaCertificateNotFound handles this case with default header values.

Resource not found
*/
type DescribeClusterCaCertificateNotFound struct {
	Payload string
}

func (o *DescribeClusterCaCertificateNotFound) Error() string {
	return fmt.Sprintf("[GET /orgs/{org}/projects/{project}/clusters/{cluster}/ca-certificate][%d] describeClusterCaCertificateNotFound  %+v", 404, o.Payload)
}

func (o *DescribeClusterCaCertificateNotFound) GetPayload() string {
	return o.Payload
}

func (o *DescribeClusterCaCertificateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
