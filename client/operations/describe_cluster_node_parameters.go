// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDescribeClusterNodeParams creates a new DescribeClusterNodeParams object
// with the default values initialized.
func NewDescribeClusterNodeParams() *DescribeClusterNodeParams {
	var ()
	return &DescribeClusterNodeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDescribeClusterNodeParamsWithTimeout creates a new DescribeClusterNodeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDescribeClusterNodeParamsWithTimeout(timeout time.Duration) *DescribeClusterNodeParams {
	var ()
	return &DescribeClusterNodeParams{

		timeout: timeout,
	}
}

// NewDescribeClusterNodeParamsWithContext creates a new DescribeClusterNodeParams object
// with the default values initialized, and the ability to set a context for a request
func NewDescribeClusterNodeParamsWithContext(ctx context.Context) *DescribeClusterNodeParams {
	var ()
	return &DescribeClusterNodeParams{

		Context: ctx,
	}
}

// NewDescribeClusterNodeParamsWithHTTPClient creates a new DescribeClusterNodeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDescribeClusterNodeParamsWithHTTPClient(client *http.Client) *DescribeClusterNodeParams {
	var ()
	return &DescribeClusterNodeParams{
		HTTPClient: client,
	}
}

/*DescribeClusterNodeParams contains all the parameters to send to the API endpoint
for the describe cluster node operation typically these are written to a http.Request
*/
type DescribeClusterNodeParams struct {

	/*Cluster
	  The identifier of a cluster.

	*/
	Cluster string
	/*Node
	  The unique identifier of a worker node in a cluster

	*/
	Node string
	/*NodePool
	  The identifier of a node pool.

	*/
	NodePool string
	/*Org
	  The organization identifier

	*/
	Org string
	/*Project
	  The project identifier

	*/
	Project string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the describe cluster node params
func (o *DescribeClusterNodeParams) WithTimeout(timeout time.Duration) *DescribeClusterNodeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the describe cluster node params
func (o *DescribeClusterNodeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the describe cluster node params
func (o *DescribeClusterNodeParams) WithContext(ctx context.Context) *DescribeClusterNodeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the describe cluster node params
func (o *DescribeClusterNodeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the describe cluster node params
func (o *DescribeClusterNodeParams) WithHTTPClient(client *http.Client) *DescribeClusterNodeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the describe cluster node params
func (o *DescribeClusterNodeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCluster adds the cluster to the describe cluster node params
func (o *DescribeClusterNodeParams) WithCluster(cluster string) *DescribeClusterNodeParams {
	o.SetCluster(cluster)
	return o
}

// SetCluster adds the cluster to the describe cluster node params
func (o *DescribeClusterNodeParams) SetCluster(cluster string) {
	o.Cluster = cluster
}

// WithNode adds the node to the describe cluster node params
func (o *DescribeClusterNodeParams) WithNode(node string) *DescribeClusterNodeParams {
	o.SetNode(node)
	return o
}

// SetNode adds the node to the describe cluster node params
func (o *DescribeClusterNodeParams) SetNode(node string) {
	o.Node = node
}

// WithNodePool adds the nodePool to the describe cluster node params
func (o *DescribeClusterNodeParams) WithNodePool(nodePool string) *DescribeClusterNodeParams {
	o.SetNodePool(nodePool)
	return o
}

// SetNodePool adds the nodePool to the describe cluster node params
func (o *DescribeClusterNodeParams) SetNodePool(nodePool string) {
	o.NodePool = nodePool
}

// WithOrg adds the org to the describe cluster node params
func (o *DescribeClusterNodeParams) WithOrg(org string) *DescribeClusterNodeParams {
	o.SetOrg(org)
	return o
}

// SetOrg adds the org to the describe cluster node params
func (o *DescribeClusterNodeParams) SetOrg(org string) {
	o.Org = org
}

// WithProject adds the project to the describe cluster node params
func (o *DescribeClusterNodeParams) WithProject(project string) *DescribeClusterNodeParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the describe cluster node params
func (o *DescribeClusterNodeParams) SetProject(project string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *DescribeClusterNodeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cluster
	if err := r.SetPathParam("cluster", o.Cluster); err != nil {
		return err
	}

	// path param node
	if err := r.SetPathParam("node", o.Node); err != nil {
		return err
	}

	// path param node_pool
	if err := r.SetPathParam("node_pool", o.NodePool); err != nil {
		return err
	}

	// path param org
	if err := r.SetPathParam("org", o.Org); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
