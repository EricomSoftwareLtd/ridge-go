// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCluster(params *CreateClusterParams) (*CreateClusterOK, error)

	CreateClusterNodePool(params *CreateClusterNodePoolParams) (*CreateClusterNodePoolOK, error)

	CreateClusterToken(params *CreateClusterTokenParams) (*CreateClusterTokenOK, error)

	DeleteCluster(params *DeleteClusterParams) (*DeleteClusterNoContent, error)

	DeleteClusterNode(params *DeleteClusterNodeParams) (*DeleteClusterNodeNoContent, error)

	DeleteClusterNodePool(params *DeleteClusterNodePoolParams) (*DeleteClusterNodePoolNoContent, error)

	DeleteClusterToken(params *DeleteClusterTokenParams) (*DeleteClusterTokenNoContent, error)

	DescribeCluster(params *DescribeClusterParams) (*DescribeClusterOK, error)

	DescribeClusterCaCertificate(params *DescribeClusterCaCertificateParams) (*DescribeClusterCaCertificateOK, error)

	DescribeClusterNode(params *DescribeClusterNodeParams) (*DescribeClusterNodeOK, error)

	DescribeClusterNodePool(params *DescribeClusterNodePoolParams) (*DescribeClusterNodePoolOK, error)

	DescribeClusterToken(params *DescribeClusterTokenParams) (*DescribeClusterTokenOK, error)

	ListClusterLBs(params *ListClusterLBsParams) (*ListClusterLBsOK, error)

	ListClusterNodePools(params *ListClusterNodePoolsParams) (*ListClusterNodePoolsOK, error)

	ListClusterNodes(params *ListClusterNodesParams) (*ListClusterNodesOK, error)

	ListClusterTokens(params *ListClusterTokensParams) (*ListClusterTokensOK, error)

	ListClusterVolumes(params *ListClusterVolumesParams) (*ListClusterVolumesOK, error)

	ListClusters(params *ListClustersParams) (*ListClustersOK, error)

	ListNodePresets(params *ListNodePresetsParams) (*ListNodePresetsOK, error)

	ListVersions(params *ListVersionsParams) (*ListVersionsOK, error)

	Status(params *StatusParams) (*StatusNoContent, error)

	UpdateCluster(params *UpdateClusterParams) (*UpdateClusterOK, error)

	UpdateClusterNodePool(params *UpdateClusterNodePoolParams) (*UpdateClusterNodePoolOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCluster creates a kubernetes cluster
*/
func (a *Client) CreateCluster(params *CreateClusterParams) (*CreateClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCluster",
		Method:             "POST",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateClusterNodePool creates a node pool for a kubernetes cluster
*/
func (a *Client) CreateClusterNodePool(params *CreateClusterNodePoolParams) (*CreateClusterNodePoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterNodePoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createClusterNodePool",
		Method:             "POST",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}/node-pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateClusterNodePoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateClusterNodePoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createClusterNodePool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateClusterToken creates a token for a kubernetes cluster
*/
func (a *Client) CreateClusterToken(params *CreateClusterTokenParams) (*CreateClusterTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createClusterToken",
		Method:             "POST",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateClusterTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateClusterTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createClusterToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCluster deletes a cluster
*/
func (a *Client) DeleteCluster(params *DeleteClusterParams) (*DeleteClusterNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCluster",
		Method:             "DELETE",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteClusterNode shuts down a cluster s worker node
*/
func (a *Client) DeleteClusterNode(params *DeleteClusterNodeParams) (*DeleteClusterNodeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteClusterNode",
		Method:             "DELETE",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}/node-pools/{node_pool}/nodes/{node}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterNodeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteClusterNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteClusterNodePool deletes a cluster s node pool
*/
func (a *Client) DeleteClusterNodePool(params *DeleteClusterNodePoolParams) (*DeleteClusterNodePoolNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterNodePoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteClusterNodePool",
		Method:             "DELETE",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}/node-pools/{node_pool}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterNodePoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterNodePoolNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteClusterNodePool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteClusterToken deletes a cluster token
*/
func (a *Client) DeleteClusterToken(params *DeleteClusterTokenParams) (*DeleteClusterTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteClusterToken",
		Method:             "DELETE",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}/tokens/{token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterTokenNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteClusterToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DescribeCluster describes a kubernetes cluster
*/
func (a *Client) DescribeCluster(params *DescribeClusterParams) (*DescribeClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeCluster",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for describeCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DescribeClusterCaCertificate describes a kubernetes cluster s c a certificate
*/
func (a *Client) DescribeClusterCaCertificate(params *DescribeClusterCaCertificateParams) (*DescribeClusterCaCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeClusterCaCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeClusterCaCertificate",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}/ca-certificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeClusterCaCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeClusterCaCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for describeClusterCaCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DescribeClusterNode gets information about a worker node
*/
func (a *Client) DescribeClusterNode(params *DescribeClusterNodeParams) (*DescribeClusterNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeClusterNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeClusterNode",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}/node-pools/{node_pool}/nodes/{node}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeClusterNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeClusterNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for describeClusterNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DescribeClusterNodePool gets information about a node pool
*/
func (a *Client) DescribeClusterNodePool(params *DescribeClusterNodePoolParams) (*DescribeClusterNodePoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeClusterNodePoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeClusterNodePool",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}/node-pools/{node_pool}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeClusterNodePoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeClusterNodePoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for describeClusterNodePool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DescribeClusterToken gets information about a cluster token
*/
func (a *Client) DescribeClusterToken(params *DescribeClusterTokenParams) (*DescribeClusterTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeClusterTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "describeClusterToken",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}/tokens/{token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeClusterTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeClusterTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for describeClusterToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListClusterLBs lists the load balancers of the kubernetes cluster s services of type load balancer
*/
func (a *Client) ListClusterLBs(params *ListClusterLBsParams) (*ListClusterLBsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClusterLBsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listClusterLBs",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}/load-balancers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListClusterLBsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClusterLBsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listClusterLBs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListClusterNodePools lists the node pools of a kubernetes clusters
*/
func (a *Client) ListClusterNodePools(params *ListClusterNodePoolsParams) (*ListClusterNodePoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClusterNodePoolsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listClusterNodePools",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}/node-pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListClusterNodePoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClusterNodePoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listClusterNodePools: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListClusterNodes lists the worker nodes of a kubernetes clusters
*/
func (a *Client) ListClusterNodes(params *ListClusterNodesParams) (*ListClusterNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClusterNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listClusterNodes",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}/node-pools/{node_pool}/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListClusterNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClusterNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listClusterNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListClusterTokens lists the tokens of a kubernetes cluster
*/
func (a *Client) ListClusterTokens(params *ListClusterTokensParams) (*ListClusterTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClusterTokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listClusterTokens",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListClusterTokensReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClusterTokensOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listClusterTokens: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListClusterVolumes lists the persistent volumes of the kubernetes cluster
*/
func (a *Client) ListClusterVolumes(params *ListClusterVolumesParams) (*ListClusterVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClusterVolumesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listClusterVolumes",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}/volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListClusterVolumesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClusterVolumesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listClusterVolumes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListClusters lists the kubernetes clusters
*/
func (a *Client) ListClusters(params *ListClustersParams) (*ListClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listClusters",
		Method:             "GET",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListNodePresets lists node presets

  List the Kubernetes-node presets. Presets are suggested node sizes in terms of CPU, memory and ephemeral storage
*/
func (a *Client) ListNodePresets(params *ListNodePresetsParams) (*ListNodePresetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNodePresetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNodePresets",
		Method:             "GET",
		PathPattern:        "/node-presets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListNodePresetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNodePresetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listNodePresets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListVersions returns supported kubernetes versions
*/
func (a *Client) ListVersions(params *ListVersionsParams) (*ListVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listVersions",
		Method:             "GET",
		PathPattern:        "/k8s-versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listVersions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Status checks if API is ready to serve requests it is if 204 HTTP response code is returned
*/
func (a *Client) Status(params *StatusParams) (*StatusNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "status",
		Method:             "GET",
		PathPattern:        "/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatusNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCluster updates kubernetes cluster parameters
*/
func (a *Client) UpdateCluster(params *UpdateClusterParams) (*UpdateClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCluster",
		Method:             "PATCH",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateClusterNodePool updates node pool parameters
*/
func (a *Client) UpdateClusterNodePool(params *UpdateClusterNodePoolParams) (*UpdateClusterNodePoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterNodePoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateClusterNodePool",
		Method:             "PATCH",
		PathPattern:        "/orgs/{org}/projects/{project}/clusters/{cluster}/node-pools/{node_pool}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterNodePoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClusterNodePoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateClusterNodePool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
