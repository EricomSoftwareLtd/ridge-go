// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Cluster A Kubernetes cluster.
//
// swagger:model cluster
type Cluster struct {

	// The CA certificate for the cluster API server
	CaCert string `json:"ca_cert,omitempty"`

	// The address through which the Kubernetes cluster's API can be reached.
	ClusterEndpoint string `json:"cluster_endpoint,omitempty"`

	// The time at which this cluster was created.
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// The current Kubernetes cluster version. Might differ from the desired_version during an upgrade to the cluster.
	// Required: true
	CurrentVersion *string `json:"current_version"`

	// The cluster is running in a degraded mode. There might be a delay between issuing a command for controlling this cluster and a response.
	Degraded bool `json:"degraded,omitempty"`

	// The desired Kubernetes cluster version.
	// Required: true
	DesiredVersion *string `json:"desired_version"`

	// The display name of the cluster.
	// Max Length: 512
	DisplayName string `json:"display_name,omitempty"`

	// Indicates whether the cluster is highly available.
	// Required: true
	HighlyAvailable *bool `json:"highly_available"`

	// A system-defined unique ID of the Kubernetes cluster.
	// Required: true
	ID *string `json:"id"`

	// The maximum acceptable cost per hour in USD. This acts as a constraint on where/if the cluster is created. It will not be taken into consideration should the customer choose to add a node pool at a later stage. Unlimited indicates that the cost is not a constraint.
	// Required: true
	InitialMaxCost *string `json:"initial_max_cost"`

	// A human readable name of the cluster. The name must be unique within the project.
	// Required: true
	// Max Length: 63
	// Min Length: 1
	// Pattern: ^[a-z]([-a-z0-9]*[a-z0-9])?$
	Name *string `json:"name"`

	// The node pools in the cluster.
	// Required: true
	NodePools *NodePools `json:"node_pools"`

	// Indicates whether the cluster is currently offline (API server is unreachable)
	Offline bool `json:"offline,omitempty"`

	// The unique identifier of the organization.
	// Required: true
	OrgID *string `json:"org_id"`

	// The amount of resources not fully provisioned due to exceeded quota.
	OverQuota *Quota `json:"over_quota,omitempty"`

	// The path to the resource that includes all the parents
	// Required: true
	Path *string `json:"path"`

	// The unique identifier of a project.
	// Required: true
	ProjectID *string `json:"project_id"`

	// qualities
	Qualities QualitySet `json:"qualities,omitempty"`

	// The unique identifier of the resource pool in which this cluster is provisioned.
	// Required: true
	ResourcePoolID *string `json:"resource_pool_id"`

	// The path to the resource pool in which this cluster is provisioned, that includes all the parents
	// Required: true
	ResourcePoolPath *string `json:"resource_pool_path"`

	// The current state of the cluster.
	// Required: true
	// Enum: [creating configuring running upgrading terminated failed]
	State *string `json:"state"`

	// The time at which this cluster was last updated.
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this cluster
func (m *Cluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesiredVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHighlyAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitialMaxCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodePools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrgID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverQuota(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQualities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcePoolID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcePoolPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Cluster) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateCurrentVersion(formats strfmt.Registry) error {

	if err := validate.Required("current_version", "body", m.CurrentVersion); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateDesiredVersion(formats strfmt.Registry) error {

	if err := validate.Required("desired_version", "body", m.DesiredVersion); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MaxLength("display_name", "body", string(m.DisplayName), 512); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateHighlyAvailable(formats strfmt.Registry) error {

	if err := validate.Required("highly_available", "body", m.HighlyAvailable); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateInitialMaxCost(formats strfmt.Registry) error {

	if err := validate.Required("initial_max_cost", "body", m.InitialMaxCost); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 63); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `^[a-z]([-a-z0-9]*[a-z0-9])?$`); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateNodePools(formats strfmt.Registry) error {

	if err := validate.Required("node_pools", "body", m.NodePools); err != nil {
		return err
	}

	if m.NodePools != nil {
		if err := m.NodePools.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_pools")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateOrgID(formats strfmt.Registry) error {

	if err := validate.Required("org_id", "body", m.OrgID); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateOverQuota(formats strfmt.Registry) error {

	if swag.IsZero(m.OverQuota) { // not required
		return nil
	}

	if m.OverQuota != nil {
		if err := m.OverQuota.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("over_quota")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("project_id", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateQualities(formats strfmt.Registry) error {

	if swag.IsZero(m.Qualities) { // not required
		return nil
	}

	if err := m.Qualities.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("qualities")
		}
		return err
	}

	return nil
}

func (m *Cluster) validateResourcePoolID(formats strfmt.Registry) error {

	if err := validate.Required("resource_pool_id", "body", m.ResourcePoolID); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateResourcePoolPath(formats strfmt.Registry) error {

	if err := validate.Required("resource_pool_path", "body", m.ResourcePoolPath); err != nil {
		return err
	}

	return nil
}

var clusterTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["creating","configuring","running","upgrading","terminated","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterTypeStatePropEnum = append(clusterTypeStatePropEnum, v)
	}
}

const (

	// ClusterStateCreating captures enum value "creating"
	ClusterStateCreating string = "creating"

	// ClusterStateConfiguring captures enum value "configuring"
	ClusterStateConfiguring string = "configuring"

	// ClusterStateRunning captures enum value "running"
	ClusterStateRunning string = "running"

	// ClusterStateUpgrading captures enum value "upgrading"
	ClusterStateUpgrading string = "upgrading"

	// ClusterStateTerminated captures enum value "terminated"
	ClusterStateTerminated string = "terminated"

	// ClusterStateFailed captures enum value "failed"
	ClusterStateFailed string = "failed"
)

// prop value enum
func (m *Cluster) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Cluster) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Cluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Cluster) UnmarshalBinary(b []byte) error {
	var res Cluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
