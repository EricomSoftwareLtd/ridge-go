// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterCreate cluster create
//
// swagger:model cluster_create
type ClusterCreate struct {

	// One or more desired locations for the cluster.
	DesiredLocations []Location `json:"desired_locations"`

	// The display name of the cluster.
	// Max Length: 512
	DisplayName string `json:"display_name,omitempty"`

	// Indicates whether the cluster is highly available. It might results in higher costs. By default, highly available cluster is created.
	HighlyAvailable *bool `json:"highly_available,omitempty"`

	// The maximum acceptable cost per hour in USD. This acts as a constraint on where/if the cluster is created. It will not be taken into consideration should the customer choose to add a node pool at a later stage. Unlimited indicates that the cost is not a constraint.
	// Required: true
	InitialMaxCost *string `json:"initial_max_cost"`

	// A human readable name of the cluster. The name must be unique within the project.
	// Max Length: 63
	// Min Length: 1
	// Pattern: ^[a-z]([-a-z0-9]*[a-z0-9])?$
	Name string `json:"name,omitempty"`

	// The node pools that are created for this cluster. Additional node pools may be added separately.
	// Required: true
	NodePools []*NodePoolCreate `json:"node_pools"`

	// qualities
	Qualities QualitySet `json:"qualities,omitempty"`

	// The resource pools in which the user wishes the cluster to run. This is mutually exclusive with desired_locations, undesired_locations and qualities.
	ResourcePoolIds []string `json:"resource_pool_ids"`

	// One or more undesired locations for the cluster.
	UndesiredLocations []Location `json:"undesired_locations"`

	// The Kubernetes cluster version. If not specified, default v1.17.6 will be chosen.
	Version string `json:"version,omitempty"`
}

// Validate validates this cluster create
func (m *ClusterCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDesiredLocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitialMaxCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodePools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQualities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUndesiredLocations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterCreate) validateDesiredLocations(formats strfmt.Registry) error {

	if swag.IsZero(m.DesiredLocations) { // not required
		return nil
	}

	for i := 0; i < len(m.DesiredLocations); i++ {

		if err := m.DesiredLocations[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("desired_locations" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterCreate) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MaxLength("display_name", "body", string(m.DisplayName), 512); err != nil {
		return err
	}

	return nil
}

func (m *ClusterCreate) validateInitialMaxCost(formats strfmt.Registry) error {

	if err := validate.Required("initial_max_cost", "body", m.InitialMaxCost); err != nil {
		return err
	}

	return nil
}

func (m *ClusterCreate) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 63); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[a-z]([-a-z0-9]*[a-z0-9])?$`); err != nil {
		return err
	}

	return nil
}

func (m *ClusterCreate) validateNodePools(formats strfmt.Registry) error {

	if err := validate.Required("node_pools", "body", m.NodePools); err != nil {
		return err
	}

	for i := 0; i < len(m.NodePools); i++ {
		if swag.IsZero(m.NodePools[i]) { // not required
			continue
		}

		if m.NodePools[i] != nil {
			if err := m.NodePools[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("node_pools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterCreate) validateQualities(formats strfmt.Registry) error {

	if swag.IsZero(m.Qualities) { // not required
		return nil
	}

	if err := m.Qualities.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("qualities")
		}
		return err
	}

	return nil
}

func (m *ClusterCreate) validateUndesiredLocations(formats strfmt.Registry) error {

	if swag.IsZero(m.UndesiredLocations) { // not required
		return nil
	}

	for i := 0; i < len(m.UndesiredLocations); i++ {

		if err := m.UndesiredLocations[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("undesired_locations" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterCreate) UnmarshalBinary(b []byte) error {
	var res ClusterCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
