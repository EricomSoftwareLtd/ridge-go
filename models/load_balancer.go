// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LoadBalancer load balancer
//
// swagger:model load_balancer
type LoadBalancer struct {

	// The unique identifier of the cluster.
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// The time at which this load balancer was created
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// The load balancer is running in a degraded mode. There might be a delay between issuing a command for controlling this load balancer and a response.
	Degraded bool `json:"degraded,omitempty"`

	// A system-defined unique ID of the load balancer
	// Required: true
	ID *string `json:"id"`

	// The public IP address that is assigned to this load balancer
	// Format: ipv4
	IPAddress *strfmt.IPv4 `json:"ip_address,omitempty"`

	// The namespace of the service for which this load balancer was created
	// Required: true
	KubernetesNamespace *string `json:"kubernetes_namespace"`

	// The Kubernetes service that makes use of this load balancer
	// Required: true
	KubernetesService *string `json:"kubernetes_service"`

	// The unique identifier of the organization.
	// Required: true
	OrgID *string `json:"org_id"`

	// The path to the resource that includes all the parents
	// Required: true
	Path *string `json:"path"`

	// ports
	Ports []*LoadBalancerPortsItems0 `json:"ports"`

	// The unique identifier of the project.
	// Required: true
	ProjectID *string `json:"project_id"`

	// The load balancer state.
	// Required: true
	// Enum: [starting running updating terminating terminated]
	State *string `json:"state"`

	// List of whitelisted networks in CIDR format (AAA.BBB.CCC.DDD/NN). Field is missing if the whitelist is not present. Field is [] if whitelist present and empty (no networks allowed)
	Whitelist []string `json:"whitelist"`
}

// Validate validates this load balancer
func (m *LoadBalancer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrgID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoadBalancer) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *LoadBalancer) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LoadBalancer) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LoadBalancer) validateIPAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.IPAddress) { // not required
		return nil
	}

	if err := validate.FormatOf("ip_address", "body", "ipv4", m.IPAddress.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LoadBalancer) validateKubernetesNamespace(formats strfmt.Registry) error {

	if err := validate.Required("kubernetes_namespace", "body", m.KubernetesNamespace); err != nil {
		return err
	}

	return nil
}

func (m *LoadBalancer) validateKubernetesService(formats strfmt.Registry) error {

	if err := validate.Required("kubernetes_service", "body", m.KubernetesService); err != nil {
		return err
	}

	return nil
}

func (m *LoadBalancer) validateOrgID(formats strfmt.Registry) error {

	if err := validate.Required("org_id", "body", m.OrgID); err != nil {
		return err
	}

	return nil
}

func (m *LoadBalancer) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *LoadBalancer) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LoadBalancer) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("project_id", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

var loadBalancerTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["starting","running","updating","terminating","terminated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		loadBalancerTypeStatePropEnum = append(loadBalancerTypeStatePropEnum, v)
	}
}

const (

	// LoadBalancerStateStarting captures enum value "starting"
	LoadBalancerStateStarting string = "starting"

	// LoadBalancerStateRunning captures enum value "running"
	LoadBalancerStateRunning string = "running"

	// LoadBalancerStateUpdating captures enum value "updating"
	LoadBalancerStateUpdating string = "updating"

	// LoadBalancerStateTerminating captures enum value "terminating"
	LoadBalancerStateTerminating string = "terminating"

	// LoadBalancerStateTerminated captures enum value "terminated"
	LoadBalancerStateTerminated string = "terminated"
)

// prop value enum
func (m *LoadBalancer) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, loadBalancerTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LoadBalancer) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoadBalancer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoadBalancer) UnmarshalBinary(b []byte) error {
	var res LoadBalancer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LoadBalancerPortsItems0 load balancer ports items0
//
// swagger:model LoadBalancerPortsItems0
type LoadBalancerPortsItems0 struct {

	// The protocol port on which the load balancer is listening
	// Required: true
	// Maximum: 65536
	// Minimum: 0
	Port *int64 `json:"port"`

	// The IP protocol
	// Required: true
	// Enum: [tcp udp]
	Protocol *string `json:"protocol"`

	// The IPs of the load balancer target VMs.
	TargetIps []strfmt.IPv4 `json:"target_ips"`

	// The node port of the service
	// Required: true
	// Maximum: 65536
	// Minimum: 0
	TargetPort *int64 `json:"target_port"`
}

// Validate validates this load balancer ports items0
func (m *LoadBalancerPortsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetIps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetPort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoadBalancerPortsItems0) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	if err := validate.MinimumInt("port", "body", int64(*m.Port), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", int64(*m.Port), 65536, false); err != nil {
		return err
	}

	return nil
}

var loadBalancerPortsItems0TypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tcp","udp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		loadBalancerPortsItems0TypeProtocolPropEnum = append(loadBalancerPortsItems0TypeProtocolPropEnum, v)
	}
}

const (

	// LoadBalancerPortsItems0ProtocolTCP captures enum value "tcp"
	LoadBalancerPortsItems0ProtocolTCP string = "tcp"

	// LoadBalancerPortsItems0ProtocolUDP captures enum value "udp"
	LoadBalancerPortsItems0ProtocolUDP string = "udp"
)

// prop value enum
func (m *LoadBalancerPortsItems0) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, loadBalancerPortsItems0TypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LoadBalancerPortsItems0) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *LoadBalancerPortsItems0) validateTargetIps(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetIps) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetIps); i++ {

		if err := validate.FormatOf("target_ips"+"."+strconv.Itoa(i), "body", "ipv4", m.TargetIps[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *LoadBalancerPortsItems0) validateTargetPort(formats strfmt.Registry) error {

	if err := validate.Required("target_port", "body", m.TargetPort); err != nil {
		return err
	}

	if err := validate.MinimumInt("target_port", "body", int64(*m.TargetPort), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("target_port", "body", int64(*m.TargetPort), 65536, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoadBalancerPortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoadBalancerPortsItems0) UnmarshalBinary(b []byte) error {
	var res LoadBalancerPortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
