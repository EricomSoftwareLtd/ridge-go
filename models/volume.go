// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Volume volume
//
// swagger:model volume
type Volume struct {

	// The ID of the node that the volume is attached to.
	AttachedNodeID string `json:"attached_node_id,omitempty"`

	// The full path of the node that the volume is attached to.
	AttachedNodePath string `json:"attached_node_path,omitempty"`

	// The unique identifier of the cluster.
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// The time at which this volume was created
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// The volume is running in a degraded mode. There might be a delay between issuing a command for controlling this volume and a response.
	Degraded bool `json:"degraded,omitempty"`

	// A system-defined unique ID of the volume
	// Required: true
	ID *string `json:"id"`

	// The unique identifier of the organization.
	// Required: true
	OrgID *string `json:"org_id"`

	// The path to the resource that includes all the parents
	// Required: true
	Path *string `json:"path"`

	// The unique identifier of the project.
	// Required: true
	ProjectID *string `json:"project_id"`

	// The persistent volume claim that resulted in this volume.
	// Required: true
	PvcID *string `json:"pvc_id"`

	// The size of the volume in MiB
	// Required: true
	// Minimum: 0
	Size *int64 `json:"size"`

	// The volume state.
	// Required: true
	// Enum: [starting running updating terminating terminated]
	State *string `json:"state"`
}

// Validate validates this volume
func (m *Volume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrgID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePvcID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Volume) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *Volume) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Volume) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Volume) validateOrgID(formats strfmt.Registry) error {

	if err := validate.Required("org_id", "body", m.OrgID); err != nil {
		return err
	}

	return nil
}

func (m *Volume) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *Volume) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("project_id", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *Volume) validatePvcID(formats strfmt.Registry) error {

	if err := validate.Required("pvc_id", "body", m.PvcID); err != nil {
		return err
	}

	return nil
}

func (m *Volume) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	if err := validate.MinimumInt("size", "body", int64(*m.Size), 0, false); err != nil {
		return err
	}

	return nil
}

var volumeTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["starting","running","updating","terminating","terminated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeTypeStatePropEnum = append(volumeTypeStatePropEnum, v)
	}
}

const (

	// VolumeStateStarting captures enum value "starting"
	VolumeStateStarting string = "starting"

	// VolumeStateRunning captures enum value "running"
	VolumeStateRunning string = "running"

	// VolumeStateUpdating captures enum value "updating"
	VolumeStateUpdating string = "updating"

	// VolumeStateTerminating captures enum value "terminating"
	VolumeStateTerminating string = "terminating"

	// VolumeStateTerminated captures enum value "terminated"
	VolumeStateTerminated string = "terminated"
)

// prop value enum
func (m *Volume) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, volumeTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Volume) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Volume) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Volume) UnmarshalBinary(b []byte) error {
	var res Volume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
