// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TokenCreated token created
//
// swagger:model token_created
type TokenCreated struct {

	// The unique identifier of the cluster.
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// The time at which this token was created
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// The display name of this token
	DisplayName string `json:"display_name,omitempty"`

	// A system-defined unique ID of the token
	// Required: true
	ID *string `json:"id"`

	// Kubeconfig file for the cluster and token.
	// Required: true
	Kubeconfig *string `json:"kubeconfig"`

	// The unique identifier of the Ridge member assigned to this token. The member ID will be used as the Kubernetes username.
	// Required: true
	MemberID *string `json:"member_id"`

	// The full path to the Ridge member assigned to this token. The member ID will be used as the Kubernetes username.
	// Required: true
	MemberPath *string `json:"member_path"`

	// The human readable name of this token
	// Required: true
	Name *string `json:"name"`

	// The unique identifier of the organization.
	// Required: true
	OrgID *string `json:"org_id"`

	// The path to the resource that includes all the parents
	// Required: true
	Path *string `json:"path"`

	// The unique identifier of the project.
	// Required: true
	ProjectID *string `json:"project_id"`

	// The authentication token.
	// Required: true
	Token *string `json:"token"`
}

// Validate validates this token created
func (m *TokenCreated) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubeconfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrgID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenCreated) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *TokenCreated) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TokenCreated) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TokenCreated) validateKubeconfig(formats strfmt.Registry) error {

	if err := validate.Required("kubeconfig", "body", m.Kubeconfig); err != nil {
		return err
	}

	return nil
}

func (m *TokenCreated) validateMemberID(formats strfmt.Registry) error {

	if err := validate.Required("member_id", "body", m.MemberID); err != nil {
		return err
	}

	return nil
}

func (m *TokenCreated) validateMemberPath(formats strfmt.Registry) error {

	if err := validate.Required("member_path", "body", m.MemberPath); err != nil {
		return err
	}

	return nil
}

func (m *TokenCreated) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TokenCreated) validateOrgID(formats strfmt.Registry) error {

	if err := validate.Required("org_id", "body", m.OrgID); err != nil {
		return err
	}

	return nil
}

func (m *TokenCreated) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *TokenCreated) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("project_id", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *TokenCreated) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TokenCreated) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TokenCreated) UnmarshalBinary(b []byte) error {
	var res TokenCreated
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
