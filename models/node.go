// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Node Information about a worker node
//
// swagger:model node
type Node struct {

	// The node chosen catalog-item ID.
	CatalogItemID string `json:"catalog_item_id,omitempty"`

	// The path to the catalog-item that includes all the parents.
	CatalogItemPath string `json:"catalog_item_path,omitempty"`

	// The time at which this node was created
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// The node is running in a degraded mode. There might be a delay between issuing a command for controlling this node and a response.
	Degraded bool `json:"degraded,omitempty"`

	// A unique identifier of the worker node
	// Required: true
	ID *string `json:"id"`

	// The IPv4 address of the worker node
	// Format: ipv4
	IPAddress strfmt.IPv4 `json:"ip_address,omitempty"`

	// The unique identifier of the node pool to which this worker node belongs
	// Required: true
	NodePoolID *string `json:"node_pool_id"`

	// The path to the node that includes all the parents
	// Required: true
	Path *string `json:"path"`

	// The state of the node
	// Required: true
	// Enum: [starting running terminating terminated]
	State *string `json:"state"`

	// The volumes that are currently attached to the node.
	Volumes []*NodeVolumesItems0 `json:"volumes"`
}

// Validate validates this node
func (m *Node) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodePoolID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Node) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Node) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Node) validateIPAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.IPAddress) { // not required
		return nil
	}

	if err := validate.FormatOf("ip_address", "body", "ipv4", m.IPAddress.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Node) validateNodePoolID(formats strfmt.Registry) error {

	if err := validate.Required("node_pool_id", "body", m.NodePoolID); err != nil {
		return err
	}

	return nil
}

func (m *Node) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

var nodeTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["starting","running","terminating","terminated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeTypeStatePropEnum = append(nodeTypeStatePropEnum, v)
	}
}

const (

	// NodeStateStarting captures enum value "starting"
	NodeStateStarting string = "starting"

	// NodeStateRunning captures enum value "running"
	NodeStateRunning string = "running"

	// NodeStateTerminating captures enum value "terminating"
	NodeStateTerminating string = "terminating"

	// NodeStateTerminated captures enum value "terminated"
	NodeStateTerminated string = "terminated"
)

// prop value enum
func (m *Node) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nodeTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Node) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *Node) validateVolumes(formats strfmt.Registry) error {

	if swag.IsZero(m.Volumes) { // not required
		return nil
	}

	for i := 0; i < len(m.Volumes); i++ {
		if swag.IsZero(m.Volumes[i]) { // not required
			continue
		}

		if m.Volumes[i] != nil {
			if err := m.Volumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Node) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Node) UnmarshalBinary(b []byte) error {
	var res Node
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NodeVolumesItems0 node volumes items0
//
// swagger:model NodeVolumesItems0
type NodeVolumesItems0 struct {

	// The volume internal ID.
	VolumeID string `json:"volume_id,omitempty"`

	// The volume full-path with all the parents.
	VolumePath string `json:"volume_path,omitempty"`
}

// Validate validates this node volumes items0
func (m *NodeVolumesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodeVolumesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeVolumesItems0) UnmarshalBinary(b []byte) error {
	var res NodeVolumesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
