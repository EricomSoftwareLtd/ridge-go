// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodePoolCreate node pool create
//
// swagger:model node_pool_create
type NodePoolCreate struct {

	// The desired number of worker nodes in the node pool
	// Required: true
	DesiredNodeCount *int32 `json:"desired_node_count"`

	// The display name of the node pool
	// Max Length: 512
	DisplayName string `json:"display_name,omitempty"`

	// The requested hardware spec of each node in the pool.
	// Required: true
	HardwareSpecs *HardwareSpecs `json:"hardware_specs"`

	// The initial Kubernetes labels (key-value pairs) that will be applied to the node.
	InitialKubernetesLabels KeyValues `json:"initial_kubernetes_labels,omitempty"`

	// The initial Kubernetes taints that will be applied to the node.
	InitialTaints []string `json:"initial_taints"`

	// A user readable name of the pool. The name must be unique within the project.
	// Max Length: 63
	// Min Length: 1
	// Pattern: ^[a-z]([-a-z0-9]*[a-z0-9])?$
	Name string `json:"name,omitempty"`

	// qualities
	Qualities QualitySet `json:"qualities,omitempty"`
}

// Validate validates this node pool create
func (m *NodePoolCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDesiredNodeCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardwareSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitialKubernetesLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQualities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodePoolCreate) validateDesiredNodeCount(formats strfmt.Registry) error {

	if err := validate.Required("desired_node_count", "body", m.DesiredNodeCount); err != nil {
		return err
	}

	return nil
}

func (m *NodePoolCreate) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MaxLength("display_name", "body", string(m.DisplayName), 512); err != nil {
		return err
	}

	return nil
}

func (m *NodePoolCreate) validateHardwareSpecs(formats strfmt.Registry) error {

	if err := validate.Required("hardware_specs", "body", m.HardwareSpecs); err != nil {
		return err
	}

	if m.HardwareSpecs != nil {
		if err := m.HardwareSpecs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hardware_specs")
			}
			return err
		}
	}

	return nil
}

func (m *NodePoolCreate) validateInitialKubernetesLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.InitialKubernetesLabels) { // not required
		return nil
	}

	if err := m.InitialKubernetesLabels.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("initial_kubernetes_labels")
		}
		return err
	}

	return nil
}

func (m *NodePoolCreate) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 63); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[a-z]([-a-z0-9]*[a-z0-9])?$`); err != nil {
		return err
	}

	return nil
}

func (m *NodePoolCreate) validateQualities(formats strfmt.Registry) error {

	if swag.IsZero(m.Qualities) { // not required
		return nil
	}

	if err := m.Qualities.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("qualities")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodePoolCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodePoolCreate) UnmarshalBinary(b []byte) error {
	var res NodePoolCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
