// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Quota quota
//
// swagger:model quota
type Quota struct {

	// The number of CPU cores not fully provisioned due to exceeded quota.
	// Minimum: 1
	CPUCores *int64 `json:"cpu_cores,omitempty"`

	// The amount of ephemeral storage in MiB not fully provisioned due to exceeded quota.
	// Minimum: 1
	EphemeralStorage *int64 `json:"ephemeral_storage,omitempty"`

	// The amount of memory in MiB not fully provisioned due to exceeded quota.
	// Minimum: 1
	Memory *int64 `json:"memory,omitempty"`

	// The number of networks not fully provisioned due to exceeded quota.
	// Minimum: 1
	Networks *int64 `json:"networks,omitempty"`

	// The number of public ips not fully provisioned due to exceeded quota.
	// Minimum: 1
	PublicIps *int64 `json:"public_ips,omitempty"`

	// The number of VM instances not fully provisioned due to exceeded quota.
	// Minimum: 1
	Vms *int64 `json:"vms,omitempty"`
}

// Validate validates this quota
func (m *Quota) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUCores(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEphemeralStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicIps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Quota) validateCPUCores(formats strfmt.Registry) error {

	if swag.IsZero(m.CPUCores) { // not required
		return nil
	}

	if err := validate.MinimumInt("cpu_cores", "body", int64(*m.CPUCores), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Quota) validateEphemeralStorage(formats strfmt.Registry) error {

	if swag.IsZero(m.EphemeralStorage) { // not required
		return nil
	}

	if err := validate.MinimumInt("ephemeral_storage", "body", int64(*m.EphemeralStorage), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Quota) validateMemory(formats strfmt.Registry) error {

	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if err := validate.MinimumInt("memory", "body", int64(*m.Memory), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Quota) validateNetworks(formats strfmt.Registry) error {

	if swag.IsZero(m.Networks) { // not required
		return nil
	}

	if err := validate.MinimumInt("networks", "body", int64(*m.Networks), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Quota) validatePublicIps(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicIps) { // not required
		return nil
	}

	if err := validate.MinimumInt("public_ips", "body", int64(*m.PublicIps), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Quota) validateVms(formats strfmt.Registry) error {

	if swag.IsZero(m.Vms) { // not required
		return nil
	}

	if err := validate.MinimumInt("vms", "body", int64(*m.Vms), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Quota) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Quota) UnmarshalBinary(b []byte) error {
	var res Quota
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
