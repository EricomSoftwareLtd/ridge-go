// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodePool Node pools are a set of nodes (VMs), with a common configuration. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling.
//
// swagger:model node_pool
type NodePool struct {

	// The unique identifier of the Kubernetes cluster to which this node pool belongs.
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// The time at which this node pool was created
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// The desired number of worker nodes in the node pool
	// Required: true
	DesiredNodeCount *int32 `json:"desired_node_count"`

	// The display name of the node pool
	// Max Length: 512
	DisplayName string `json:"display_name,omitempty"`

	// The requested hardware spec of each node in the pool.
	// Required: true
	HardwareSpecs *HardwareSpecs `json:"hardware_specs"`

	// A system-defined unique ID of the node pool.
	// Required: true
	ID *string `json:"id"`

	// The initial Kubernetes labels (key-value pairs) that will be applied to the node.
	// Required: true
	InitialKubernetesLabels KeyValues `json:"initial_kubernetes_labels"`

	// The initial Kubernetes taints that will be applied to the node.
	// Required: true
	InitialTaints []string `json:"initial_taints"`

	// The human readable name of the node pool. The name is unique within the cluster.
	// Required: true
	// Max Length: 63
	// Min Length: 1
	// Pattern: ^[a-z]([-a-z0-9]*[a-z0-9])?$
	Name *string `json:"name"`

	// node counts
	NodeCounts *NodePoolNodeCounts `json:"node_counts,omitempty"`

	// The unique identifier of the organization.
	// Required: true
	OrgID *string `json:"org_id"`

	// The path to the resource that includes all the parents
	// Required: true
	Path *string `json:"path"`

	// The unique identifier of the project
	// Required: true
	ProjectID *string `json:"project_id"`

	// qualities
	Qualities QualitySet `json:"qualities,omitempty"`

	// The time at which this node pool was last updated
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this node pool
func (m *NodePool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesiredNodeCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardwareSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitialKubernetesLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitialTaints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeCounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrgID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQualities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodePool) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *NodePool) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NodePool) validateDesiredNodeCount(formats strfmt.Registry) error {

	if err := validate.Required("desired_node_count", "body", m.DesiredNodeCount); err != nil {
		return err
	}

	return nil
}

func (m *NodePool) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MaxLength("display_name", "body", string(m.DisplayName), 512); err != nil {
		return err
	}

	return nil
}

func (m *NodePool) validateHardwareSpecs(formats strfmt.Registry) error {

	if err := validate.Required("hardware_specs", "body", m.HardwareSpecs); err != nil {
		return err
	}

	if m.HardwareSpecs != nil {
		if err := m.HardwareSpecs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hardware_specs")
			}
			return err
		}
	}

	return nil
}

func (m *NodePool) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *NodePool) validateInitialKubernetesLabels(formats strfmt.Registry) error {

	if err := m.InitialKubernetesLabels.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("initial_kubernetes_labels")
		}
		return err
	}

	return nil
}

func (m *NodePool) validateInitialTaints(formats strfmt.Registry) error {

	if err := validate.Required("initial_taints", "body", m.InitialTaints); err != nil {
		return err
	}

	return nil
}

func (m *NodePool) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 63); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `^[a-z]([-a-z0-9]*[a-z0-9])?$`); err != nil {
		return err
	}

	return nil
}

func (m *NodePool) validateNodeCounts(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeCounts) { // not required
		return nil
	}

	if m.NodeCounts != nil {
		if err := m.NodeCounts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_counts")
			}
			return err
		}
	}

	return nil
}

func (m *NodePool) validateOrgID(formats strfmt.Registry) error {

	if err := validate.Required("org_id", "body", m.OrgID); err != nil {
		return err
	}

	return nil
}

func (m *NodePool) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *NodePool) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("project_id", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *NodePool) validateQualities(formats strfmt.Registry) error {

	if swag.IsZero(m.Qualities) { // not required
		return nil
	}

	if err := m.Qualities.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("qualities")
		}
		return err
	}

	return nil
}

func (m *NodePool) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodePool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodePool) UnmarshalBinary(b []byte) error {
	var res NodePool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NodePoolNodeCounts node pool node counts
//
// swagger:model NodePoolNodeCounts
type NodePoolNodeCounts struct {

	// The number of nodes that are running
	Running int32 `json:"running,omitempty"`

	// The number of nodes that can't be provisioned at this time due to lack of resources
	Shortage int32 `json:"shortage,omitempty"`

	// The number of nodes in the provisioning stage
	Starting int32 `json:"starting,omitempty"`

	// The number of nodes that are in the process of being terminated
	Terminating int32 `json:"terminating,omitempty"`
}

// Validate validates this node pool node counts
func (m *NodePoolNodeCounts) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodePoolNodeCounts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodePoolNodeCounts) UnmarshalBinary(b []byte) error {
	var res NodePoolNodeCounts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
